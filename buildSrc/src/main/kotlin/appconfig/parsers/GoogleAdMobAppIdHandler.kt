package appconfig.parsers

import appconfig.GRADLE_TASK_NAME
import org.gradle.api.Project

object GoogleAdMobAppIdHandler {

    private const val PATH = "src/main/res/values/appodeal_config.xml"

    private const val GRADLE_PATH = "build.gradle.kts"

    private const val MANIFEST_PATH = "src/main/AndroidManifest.xml"

    private val APPODEAL = "implementation(Tools.APPODEAL)"

    private val APPODEAL_EXCLUDE = "implementation(Tools.APPODEAL) { exclude(\"com.appodeal.ads.sdk.networks\", \"admob\") }"

    private const val ADMOB_META = """        <meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="@string/google_admob_app_id"/>
                        
    </application>"""

    private val ADMOB_META_REGEX = """
                    [ ]*<meta-data[ ]*
                        [ ]*android:name="com.google.android.gms.ads.APPLICATION_ID"[ ]*
                        [ ]*android:value="@string/google_admob_app_id"/>[ ]*
                """.trimIndent().toRegex()

    /**
     * Create strings resource file with Advertising configs
     */
    private val template = """
        <?xml version="1.0" encoding="utf-8"?>
        <!--Do not modify. Generated by '$GRADLE_TASK_NAME' task-->
        <resources>
            <string name="google_admob_app_id" translatable="false">%s</string>
        </resources>
    """.trimIndent()

    fun generateXml(
        customProject: Project,
        googleAdmobAppId: String
    ) {
        print("Generating advertising config strings.xml... ")

        val file = customProject.file(PATH)

        val gradleFile = customProject.file(GRADLE_PATH)
        val gradleFileText = gradleFile.readText()

        val manifestFile = customProject.file(MANIFEST_PATH)
        val manifestFileText = manifestFile.readText()

        if (googleAdmobAppId.isEmpty()) {
            if (!gradleFileText.contains(APPODEAL_EXCLUDE)) {
                val editedGradleText = gradleFileText.replace(APPODEAL, APPODEAL_EXCLUDE)
                gradleFile.writeText(editedGradleText)
            }

            val editedManifestText = manifestFileText.replace(ADMOB_META_REGEX, "")
            manifestFile.writeText(editedManifestText)
        } else {
            val editedGradleText = gradleFileText.replace(APPODEAL_EXCLUDE, APPODEAL)
            gradleFile.writeText(editedGradleText)

            if (!manifestFileText.contains(ADMOB_META_REGEX)) {
                val editedManifestText = manifestFileText.replace("</application>", ADMOB_META)
                manifestFile.writeText(editedManifestText)
            }
        }

        if (!file.exists()) {
            file.createNewFile()
        }

        file.writeText(
            template.format(googleAdmobAppId)
        )

        println("âœ… ")
    }
}